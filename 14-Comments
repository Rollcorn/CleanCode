    Прокомментируйте 7 мест в своём коде там, где это явно уместно.
1)  https://github.com/Rollcorn/Contests/blob/main/LeetCode/567-Permutation-in-String/Solution.java
    
    Следующий блок кода располагался в цикле для определения индекса символа 
    в массиве. Индекс символа в массиве равен его порядковому номеру в алфавите


    if( rightStrIndex - leftStrIndex + 1 < s1.length() ){
        rightStrIndex += 1;
    } else {
        s2ArrOfCharFreqIn[s2.charAt(leftStrIndex) - 'a'] -= 1;
        rightStrIndex += 1;
        leftStrIndex += 1;
    }

    Добавил комментарий пояснения
    if( rightStrIndex - leftStrIndex + 1 < s1.length() ){
        rightStrIndex += 1;
    } else {
        // 'a' имеет свой порядковый номер среди симвлов UNICOD, 
        // отнимаем его чтоб определить порядковый номер символа 
        s2ArrOfCharFreqIn[s2.charAt(leftStrIndex) - 'a'] -= 1;
        rightStrIndex += 1;
        leftStrIndex += 1;
    }

2)  https://github.com/Rollcorn/Contests/blob/main/LeetCode/977-Squares-of-a-Sorted-Array/Solution.java

    ЗАДАЧА: Сортировка квадратов чисел в массиве.

    // Выполнение предварительной сортировки массива по модулю
        while( lastNegativeElem >= 0 && firstPositiveElem <= endOfArray ) {
            if( Math.abs(nums[lastNegativeElem]) < nums[firstPositiveElem] ) {
                res[currentIndex] = (int) Math.pow( nums[lastNegativeElem], 2 );
                lastNegativeElem--;
            } else if ( Math.abs(nums[lastNegativeElem]) == nums[firstPositiveElem] ){
                res[currentIndex] = (int) Math.pow( nums[lastNegativeElem], 2 );
                currentIndex++;
                lastNegativeElem--;
                res[currentIndex] = (int) Math.pow( nums[firstPositiveElem], 2 );
                firstPositiveElem++;
            } else {
                res[currentIndex] = (int) Math.pow( nums[firstPositiveElem], 2 );
                firstPositiveElem++;
            }
            currentIndex++;
        }

3)  https://github.com/Rollcorn/ServerClientApp/blob/working/src/C_Client.cpp

    // Подготовка сообщения для отправки в формат вектора
    std::vector<char> message = {strMessage.begin(), strMessage.end()};
    message.push_back( '\0' );
    message.resize(strMessage.length() );

4)  https://github.com/Rollcorn/ServerClientApp/blob/working/src/C_Server.cpp

        // Генерация случайного числа
        std::random_device  rd;
        std::mt19937        gen( rd() );
        int a = -100, b = 100;
        std::uniform_int_distribution<int> dist( a, b );

5)  https://github.com/Rollcorn/ServerClientApp/blob/working/src/C_Server.cpp
    
    // Проверка текущего буфера на сигнал конца обмена
    endConnSignal = buffer.data() == END_CONN_MESSEGE;


6)  https://github.com/Rollcorn/ServerClientApp/blob/main/src/C_Client.cpp

    // Обновление таймера
    end = std::chrono::steady_clock::now();
    curentWorkTime = end - start;


7)  https://github.com/Rollcorn/ServerClientApp/blob/main/src/C_UDPSocket.cpp

    // Формирование строки адреса отправителя
    if (okRecv) {
        std::string remoteIp    = inet_ntoa( m_remoteAddr.sin_addr);
        std::string remotePort  = std::to_string( ntohs(m_remoteAddr.sin_port) );
        a_from = remoteIp + ":" + remotePort;
    }


    5 мест, где эти комментарии были излишни, удалите их и сделайте сам код более наглядным.

1)  https://github.com/Rollcorn/ServerClientApp/blob/main/src/C_Client.cpp
    Здесь комментарий излишен так как название метода говорит за себя само
    // Инстанцируем необходимый  сокет
    m_socket = CreateSocket("UDP");

2)  Здесь так же метод на самом деле не нуждается в дополнительном комментировании 
    std::fill( buffer.begin(), buffer.end(), '\0' );    // Очищение буфера

3)  Название переменной само по себе означает то что передано в комментарии   
    bool    sendRes = true; // результат отправки данных
    bool    recvRes = true; // Результат получения данных

4)  https://github.com/Rollcorn/AlgorithmsLessons/blob/main/Lesson10/src/myAlgo/PowerSet.java
    Коментарий является пересказом условия блока if()
    // Equals keys must have equals hashes and equals lengths
    if ((hashFun(mSlots[hashKey]) != hashFun(aKey)) && (mSlots[hashKey].length() != aKey.length())) {
        continue;
    }

5)  https://github.com/Rollcorn/ServerClientApp/blob/working/src/C_UDPSocket.cpp

    Лишнее пояснение функции стандартной библиотеки С++

    // Очистка струтуры адреса
    ZeroMemory( &m_remoteAddr, sizeof( m_remoteAddr ) );